:py:mod:`waymax.dynamics.delta`
===============================

.. py:module:: waymax.dynamics.delta

.. autoapi-nested-parse::

   Library for different delta action space object dynamics models for Waymax.

   Delta dynamics modeled can be applied in global coordinates or in the local
   (object) coordinate frame.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   waymax.dynamics.delta.DeltaGlobal
   waymax.dynamics.delta.DeltaLocal




.. py:class:: DeltaGlobal(dt: float = 0.1, max_dx: float = 6.0, max_dy: float = 6.0, max_dyaw: float = jnp.pi)


   Bases: :py:obj:`waymax.dynamics.abstract_dynamics.DynamicsModel`

   Dynamics model operating in global coordinates.

   Deltas (displacements) are computed in the global coordinate frame,
   regardless of the orientation of the objects.

   .. py:method:: action_spec() -> dm_env.specs.BoundedArray

      Action spec for the delta global action space.


   .. py:method:: compute_update(action: waymax.datatypes.Action, trajectory: waymax.datatypes.Trajectory) -> waymax.datatypes.TrajectoryUpdate

      Computes the pose and velocity updates at timestep.

      :param action: Actions to take. Has shape (..., num_objects).
      :param trajectory: Trajectory to be updated. Has shape of (..., num_objects,
                         num_timesteps=1).

      :returns:

                The trajectory update for timestep of shape
                  (..., num_objects, num_timesteps=1).


   .. py:method:: _clip_values(action: jax.Array) -> jax.Array

      Clips action values to the action spec.

      :param action: A tensor of shape (..., 3) containing x, y, and yaw values.

      :returns: A tensor of shape (..., 3) containing action values clipped to the
                minimum/maximum bounds.


   .. py:method:: inverse(trajectory: waymax.datatypes.Trajectory, metadata: waymax.datatypes.ObjectMetadata, timestep: int) -> waymax.datatypes.Action

      Runs inverse dynamics model to infer actions for specified timestep.

      :param trajectory: A Trajectory used to infer actions of shape (..., num_objects,
                         num_timesteps).
      :param metadata: Object metadata for the trajectory of shape (..., num_objects).
      :param timestep: Index of time for actions.

      :returns:

                An Action that converts traj[timestep] to traj[timestep+1] of shape
                  (..., num_objects, dim=2).



.. py:class:: DeltaLocal(dt: float = 0.1, max_dx: float = 6.0, max_dy: float = 6.0, max_dyaw: float = jnp.pi)


   Bases: :py:obj:`DeltaGlobal`

   Dynamics model operating in global coordinates.

   Actions are defined as (dx, dy, dyaw) in local coordinates.

   .. py:method:: compute_update(action: waymax.datatypes.Action, trajectory: waymax.datatypes.Trajectory) -> waymax.datatypes.TrajectoryUpdate

      Converts to global actions and calls DeltaGlobal.compute_update.

      :param action: Actions to take. Has shape (..., num_objects).
      :param trajectory: Trajectory to be updated. Has shape of (..., num_objects,
                         num_timesteps=1).

      :returns:

                The trajectory update for timestep of shape
                  (..., num_objects, num_timesteps=1).


   .. py:method:: inverse(trajectory: waymax.datatypes.Trajectory, metadata: waymax.datatypes.ObjectMetadata, timestep: int) -> waymax.datatypes.Action

      Calls DeltaGlobal's inverse and converts to local coordinates.

      :param trajectory: A Trajectory used to infer actions of shape (..., num_objects,
                         num_timesteps=1).
      :param metadata: Object metadata for the trajectory of shape (..., num_objects).
      :param timestep: index of time for actions.

      :returns:

                An Action that converts traj[timestep] to traj[timestep+1] of shape
                  (..., num_objects, dim=2).



